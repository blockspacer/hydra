#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\hyphenation{Reunamo}
\hyphenation{Kuusisto}
\hyphenation{Kuosa}
\hyphenation{Lepokorpi}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Tools and Libraries
\end_layout

\begin_layout Author
Joonatan Kuosa
\end_layout

\begin_layout Standard
Some information about the chosen tools, this list should be up to date
 and it should list reasons why specific tool or library was chosen.
 Any objections to these should be discussed as soon as possible.
\end_layout

\begin_layout Section
Tools
\end_layout

\begin_layout Subsection
Version Control
\end_layout

\begin_layout Standard
Version control done with Mercurial
\begin_inset CommandInset href
LatexCommand href
target "http://mercurial.selenic.com/"

\end_inset

.
 
\end_layout

\begin_layout Standard
Mercurial is good because: 
\end_layout

\begin_layout Itemize
It is distributed version control system so it can be branched by the users
\begin_inset Newline newline
\end_inset

and those branches can be easily merged back to the main tip.
\end_layout

\begin_layout Itemize
It is really easy to use.
\end_layout

\begin_layout Itemize
It's easier to set up than Subversion.
\end_layout

\begin_layout Itemize
Has similar syntax to Subversion.
\end_layout

\begin_layout Itemize
Has Windows and Mac OS X clients with GUI.
\end_layout

\begin_layout Subsection
Build system
\end_layout

\begin_layout Standard
We are going to use CMake
\begin_inset CommandInset href
LatexCommand href
target "http://www.cmake.org/"

\end_inset

 build system because:
\end_layout

\begin_layout Itemize
It is completely portable: Linux, UNIX, Windows, Mac OS X
\end_layout

\begin_layout Itemize
It is easy to use.
\end_layout

\begin_layout Itemize
It does not depend on other tools.
\end_layout

\begin_layout Subsection
Design documents
\end_layout

\begin_layout Subsubsection
UML editor
\end_layout

\begin_layout Standard
ArgoUML
\begin_inset CommandInset href
LatexCommand href
target "http://argouml.tigris.org/"

\end_inset

 is good I think.
 Any suggestions?
\end_layout

\begin_layout Subsubsection
Document processor
\end_layout

\begin_layout Standard
It would be easier if everyone would use the same tool.
 Or at least we need to agree upon format we are going to use if we exchange
 unfinished documents with each other.
 For finished documents, pdf is fine.
\end_layout

\begin_layout Standard
For text documents Lyx is working perfectly so that would be my suggestion.
 You don't need to do any formating with it, all is formated for you based
 on the document type, which in most cases would be articles, reports and
 presentations.
 Also lyx uses plain text format to store the documents so it's easy to
 put in to version control.
\end_layout

\begin_layout Subsubsection
Others
\end_layout

\begin_layout Standard
Any other design tools we need?
\end_layout

\begin_layout Section
Libraries
\end_layout

\begin_layout Subsection
Ogre3D
\end_layout

\begin_layout Standard
Rendering library we use for the implementation.
 There should be descriptive document ogre3d which descripes the features
 and problems with this engine.
\end_layout

\begin_layout Standard
Completely free and dynamic and static linking allowed from propietary code.
 
\end_layout

\begin_layout Subsection
Equalizer Graphics
\end_layout

\begin_layout Standard
Graphics library that handles VR releated features like cluster, quad-buffer
 stereo, asymmetric frustum
\begin_inset space ~
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Head tracking creates asymmetric frustum.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Equalizer has features like multi-GPU or multi Pipe support, multi Node
 support and also new Nodes can be introduced after a process has started.
 GPUs can render to texture and that texture is deliver to display Node,
 so we can create huge clusters rendering one screen.
 Equalizer also supports assigning GPUs for different eyes and rendering
 different models with different GPUs.
\end_layout

\begin_layout Standard
Completely free and dynamic linking allowed from propietary code.
 Need to check about static linking.
\end_layout

\begin_layout Subsection
vmml
\end_layout

\begin_layout Standard
Mathematics library distributed with Equalizer Graphics.
 Not the best one around, but for simple things it is adequate.
 Mentioned here so if we need a better one we can make a notice here.
\end_layout

\begin_layout Standard
I'm not too happy with this library, it has serious flaws with missing features
 especially concerning quaternions for example conversions from euler angles,
 rotations around axis, slerp and nlerp.
\end_layout

\begin_layout Standard
Completely free and dynamic linking allowed from propietary code.
 Need to check about static linking.
 With mathematics library the linking is more of a problem because if static
 linking is not allowed, inline functions will impose the license of the
 library onto the application.
\end_layout

\begin_layout Standard
There seems to be not too many viable alternatives for 3d mathematics library.
 Most are incomplete like vmml and cml.
 Are writen in C which impose complex syntax, repetive types.
 Have bad licenses like GPL or LGPL.
 So we might need to later write our own mathematics library to replace
 this functionality.
 To ease the transformation all used mathematic types should be typedefs
 in the vl namespace.
 Like vl::scalar, vl::vector and vl::quaternion.
\end_layout

\begin_layout Subsubsection
VRPN
\end_layout

\begin_layout Standard
Virtual Reality Peripheral Network is simple and efficient library to connect
 to different tracking services and also to different joysticks, gamepads
 and mouses.
\end_layout

\begin_layout Standard
As most tracking systems have vrpn support we will use it as our main tracking
 system and no other tracking system implementation is planned for now.
\end_layout

\begin_layout Standard
Completely free and dynamic linking allowed from propietary code.
 Need to check about static linking.
\end_layout

\begin_layout Subsubsection
RakNet
\end_layout

\begin_layout Standard
Networking library designed for games.
 Includes number of advanced features like voice sending.
 Includes also usefull features like UDP streams that are sequenced but
 provide minimal latency, reliable UDP, timestamping etc.
\end_layout

\begin_layout Standard
Not sure if this is the right libary for us though as it's designed for
 communications over the Internet specifically and has huge amount of features
 we don't need for this project.
 Also has C coding style even though it's C++ library and the license is
 not too appealing.
\end_layout

\begin_layout Standard
Licenses both free and cheap comercial licenses.
\end_layout

\begin_layout Subsubsection
boost::asio
\end_layout

\begin_layout Standard
Networking library designed around asynchronous messages
\begin_inset space ~
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Asynchronous communications are specifically non-blocking so they do not
 waste computational time idling.
\end_layout

\end_inset

.
 Boost quality design, documentation, interface and code.
 Though in the spirit of boost style it's difficult to get started and the
 header files are nearly impossible to read.
\end_layout

\begin_layout Standard
asio is a low level networking library.
 It provides only the same functionality as BSD sockets but in a portable
 maner and focusing on providing easy to use asychronicity and efficent
 implementation on every platform.
 Provides both TCP and UDP protocols.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
General discussion on protocols should be moved to another section.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Completely free i.e.
 Open Souce.
 All linking and derived works are allowed from propietary code.
\end_layout

\begin_layout Subsubsection
OpenSG
\end_layout

\begin_layout Standard
Alternative rendering engine.
 There should be descriptive document opensg which descripes the features
 and problems with this engine.
\end_layout

\begin_layout Standard
Completely free and dynamic linking allowed from propietary code.
 Need to check about static linking.
\end_layout

\begin_layout Section
Development enviroment
\end_layout

\begin_layout Standard
I will be using mostly Linux for development, specifically Gentoo 64-bit.
 Reunamo is also using Linux, specifically Debian 32-bit.
 So our main development enviroment is Linux.
\end_layout

\begin_layout Standard
That said all production code has to be portable and it has to compile and
 work with both Linux and Windows.
 It also has to be tested on both operating systems and both 32-bit and
 64-bit versions of those operating systems.
 For Windows we have the extra effort to test both Windows XP and Windows
 7 because these operating systems have serious incompatibilities and we
 are targeting both of them.
\end_layout

\begin_layout Standard
Aumotating compiling and testing on all platforms would be the best solution,
 but as long as that is not possible or feasable we need to compile and
 run all the tests of the latest software product on all platforms at least
 once a week manually.
 So we need to appoint persons to compile and run the tests every week.
\end_layout

\begin_layout Standard
I will set up both Linux and Windows development enviroments and document
 the necessary software needed to install and configure.
 For Windows I will also provide necessary binaries so people can avoid
 the trouble of compiling everything.
 Both 32-bit and 64-bit binaries are to be provide, binaries might depend
 on at least Pentium 4 processor and specific versions of Visual Studio.
\end_layout

\begin_layout Subsection
Linux development enviroment
\end_layout

\begin_layout Standard
This is bit sparse documentation of the Linux enviroment.
 Try to add bit more to it.
\end_layout

\begin_layout Subsubsection
GCC
\end_layout

\begin_layout Standard
Version 4 is advised for example 4.4, might work on older version also.
\end_layout

\begin_layout Subsubsection
CMake
\end_layout

\begin_layout Standard
Version 2.8 required.
 Use package manager or get the source from
\begin_inset space ~
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "www.cmake.org"

\end_inset


\end_layout

\begin_layout Subsubsection
Mercurial
\end_layout

\begin_layout Standard
Command line tools provided by the core packet.
\end_layout

\begin_layout Subsubsection
Subversion
\end_layout

\begin_layout Standard
Command line tools provided by the core packet.
\end_layout

\begin_layout Subsubsection
Boost
\end_layout

\begin_layout Standard
Version atleast 1.40.
\end_layout

\begin_layout Subsubsection
Ogre Depedencies
\end_layout

\begin_layout Standard
If installing form the package manager for binary distros like Debian all
 dependencies need to have the dev package installed also.
\end_layout

\begin_layout Standard
FreeImage if not provided by the package manager you can get it from 
\begin_inset CommandInset href
LatexCommand href
target "http://sourceforge.net/projects/freeimage/"

\end_inset

.
\end_layout

\begin_layout Standard
FreeType should be installed on your system already or can be installed
 with the package manager.
\end_layout

\begin_layout Standard
OIS if not provided by the package manager, you might as well use the subversion
 repository 
\begin_inset CommandInset href
LatexCommand href
target "https://wgois.svn.sourceforge.net/svnroot/wgois "

\end_inset

.
\end_layout

\begin_layout Standard
Nvidia Cg Toolkit, provided by propietary packages.
 If not provided by the package manager you can get it from 
\begin_inset CommandInset href
LatexCommand href
target "http://developer.nvidia.com/object/cg_download.html"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Ogre3D
\end_layout

\begin_layout Standard
Latest subversion head required.
\end_layout

\begin_layout Subsubsection
Equalizer Graphics
\end_layout

\begin_layout Standard
Latest subversion head required.
\end_layout

\begin_layout Subsection
Windows development enviroment
\end_layout

\begin_layout Subsubsection
Visual Studio
\end_layout

\begin_layout Standard
Using Visual Studio 2010.
 For now this is release candidate, freely availabale
\begin_inset Note Note
status open

\begin_layout Plain Layout
Add url to load it from.
\end_layout

\end_inset

.
 After it's release we need ask University for a license or buy licenses
 (200 euros each).
\end_layout

\begin_layout Standard
Only the Standard and Professional versions of Visual Studio include 64-bit
 compiler and they work out-of-box with CMake to compile 64-bit binaries
 so I think it's easier to work with the paid for versions than the free
 Express edition which you would have to hack to get it working correctly
 with CMake.
 Still need to run tests for 32-bit and if the Express is good for that.
\end_layout

\begin_layout Subsubsection
Bjam
\end_layout

\begin_layout Standard
Needed if you are going to build boost.
\end_layout

\begin_layout Subsubsection
CMake
\end_layout

\begin_layout Standard
CMake 2.8 or higher.
 CMake provides downloads for 32-bit binary which works perfectly.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Add url to load it from.
\end_layout

\end_inset

 CMake is necessary for configuring Ogre3D.
 And it is also our build system.
\end_layout

\begin_layout Subsubsection
TortoiseHg
\end_layout

\begin_layout Standard
I would suggest using TortoiseHg
\begin_inset space ~
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://tortoisehg.bitbucket.org/"

\end_inset

 for Mercurial as it's relatively easy to use and works from Windows explorer.
 Any other Mercurial client is good also but unsupported.
\end_layout

\begin_layout Standard
We use Mercurial as our versioning system so anyone working with any resource
 be it code, script, data or documentation needs to lear to use it.
 In the minimum checking out the current version, if you are only testing.
\end_layout

\begin_layout Standard
I'm not sure how well it can be integrated to Visual Studio 2010, I'll see
 if it can be done.
\end_layout

\begin_layout Subsubsection
TorteiseSVN
\end_layout

\begin_layout Standard
I would suggest using TortoiseSVN
\begin_inset space ~
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://tortoisesvn.tigris.org/"

\end_inset

 for Subversion as it's relative easy to use and integrates to Windows Explorer.
 Any other client is good also but unsupported.
 Subversion is only needed for checking out Ogre3D and Equalizer Graphics.
\end_layout

\begin_layout Subsubsection
Boost
\end_layout

\begin_layout Standard
Boost 1.40, later versions should be fine.
 Boost is needed for Ogre3D threads, equalizer uses boost::asio for UDP
 but it downloads and compiles it's own version.
\end_layout

\begin_layout Standard
I will provide this already compiled with VS2010 for 32-bit and 64-bit as
 it's going to change rarely.
 
\end_layout

\begin_layout Subsubsection
Ogre Depedencies
\end_layout

\begin_layout Standard
Ogre3D Dependencies from Ogre website.
 These include Cg, FreeImage, FreeType, OIS.
\end_layout

\begin_layout Standard
I will provide VS2010 compiled static libs of these for 32-bit and 64-bit.
 Also I will include to this my package all extra libraries if necessary.
\end_layout

\begin_layout Subsubsection
Ogre3D
\end_layout

\begin_layout Standard
Ogre3D from subversion
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Add url to load it from.
\end_layout

\end_inset

.
 We will use the latest development version throughout the delopment, this
 will avoid the first maintanance hasle after new version of Ogre3D is released
 after our software is at the release or maintanace state so we slide smoothly
 to the new version.
 Also there is quite a nice bunch of future features in Ogre3D 1.8: like
 new threading model for background loading and maybe some work on task
 based rendering also.
\end_layout

\begin_layout Standard
Compiling, this should have information on compiling.
\end_layout

\begin_layout Subsubsection
Equalizer Graphics
\end_layout

\begin_layout Standard
Equalizer Graphics from subversion
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Add url to load it from.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Compiling, this should have information on compiling.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset


\end_layout

\end_body
\end_document
