#-------------------------------------------------------------------
# Joonatan Kuosa <joonatan.kuosa@savantsimulators.com>
# 2010-11
#
# This file is part of the CMake build system for Hydra
#
# The contents of this file are placed in the public domain. Feel
# free to make use of it in any way you like.
#
#-------------------------------------------------------------------

project( "demos" CXX )

cmake_minimum_required(VERSION 2.6)

#set(LIB_DIR "C:\\jotu\\software_development\\hydra_dependencies_libraries\\libs" CACHE PATH "Dependencies library dir")

# Copy configs
copy_start_scripts( hydra
	ogre_project/ogre.prj
	"ogre" )

copy_start_scripts( hydra
	collada_test_project/collada_test.prj
	"collada" )

copy_start_scripts( hydra
	"eye_tracking_test_project/eye_tracking_test.prj"
	"eye_tracking" )

copy_start_scripts( hydra
	light_test_project/light_test.prj
	"light_test" )

copy_start_scripts( hydra
	generated_physics_project/generated_physics.prj
	"generated_physics" )

copy_start_scripts( hydra
	robot_project/robot.prj
	"robot" )

copy_start_scripts( hydra
	perapora_project/perapora.prj
	"perapora" )

copy_start_scripts( hydra
	perapora_project/perapora_physics.prj
	"perapora_physics" )

add_executable( fake_tracking_server
	fake_tracking_server.cpp
	${HydraMain_SOURCE_DIR}/base/sleep.hpp
	${HydraMain_SOURCE_DIR}/base/time.hpp
	${HydraMain_SOURCE_DIR}/base/time.cpp
	${HydraMain_SOURCE_DIR}/base/chrono.hpp
	${HydraMain_SOURCE_DIR}/base/chrono.cpp
	${HydraMain_SOURCE_DIR}/math/conversion.hpp
	${HydraMain_SOURCE_DIR}/math/math.hpp
	${HydraMain_SOURCE_DIR}/math/math.cpp
	${HydraMain_SOURCE_DIR}/base/filesystem.cpp
	${HydraMain_SOURCE_DIR}/base/filesystem.hpp
	${HydraMain_SOURCE_DIR}/base/string_utils.cpp
	${HydraMain_SOURCE_DIR}/base/string_utils.hpp
	${HydraMain_SOURCE_DIR}/base/system_util.hpp
	${HydraMain_SOURCE_DIR}/base/system_util.cpp
	${HydraMain_SOURCE_DIR}/logger.hpp
	${HydraMain_SOURCE_DIR}/defines.hpp
	)

target_link_libraries(fake_tracking_server
	${Ogre_LIBRARY}
	${VRPN_LIBRARY}
	${Boost_FILESYSTEM_LIBRARIES}
	${Boost_PROGRAM_OPTIONS_LIBRARIES}
	)

add_executable(vrpn_tracker_recorder 
	vrpn_tracker_recorder.cpp
	${HydraMain_SOURCE_DIR}/base/sleep.hpp
	${HydraMain_SOURCE_DIR}/base/time.hpp
	${HydraMain_SOURCE_DIR}/base/time.cpp
	${HydraMain_SOURCE_DIR}/base/chrono.cpp
	${HydraMain_SOURCE_DIR}/base/chrono.hpp
	)

target_link_libraries(vrpn_tracker_recorder
	${VRPN_LIBRARY}
	${Boost_PROGRAM_OPTIONS_LIBRARIES}
	)

add_executable(vrpn_analog_server
	vrpn_analog_server.cpp
	${HydraMain_SOURCE_DIR}/base/sleep.hpp
	${HydraMain_SOURCE_DIR}/base/time.hpp
	${HydraMain_SOURCE_DIR}/base/time.cpp
	)

target_link_libraries(vrpn_analog_server ${VRPN_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARIES} )

set(LAUNCHER_SOURCES
	remote_launcher.cpp
	remote_launcher.hpp
	remote_launcher_app.cpp
	${HydraMain_SOURCE_DIR}/base/sleep.hpp
	${HydraMain_SOURCE_DIR}/base/filesystem.hpp
	${HydraMain_SOURCE_DIR}/base/filesystem.cpp
	${HydraMain_SOURCE_DIR}/base/string_utils.cpp
	${HydraMain_SOURCE_DIR}/base/string_utils.hpp
	${HydraMain_SOURCE_DIR}/base/system_util.hpp
	${HydraMain_SOURCE_DIR}/base/system_util.cpp
	)

# Launcher
# Windows has a GUI for ease of management
# Linux version is designed to work as a daemon (started when system starts)
if(WIN32)
	add_executable(hydra_remote_launcher WIN32
		remote_launcher_gui.hpp
		${LAUNCHER_SOURCES}
		)
	# TODO copy the incon file to output directory
else()
	add_executable(hydra_remote_launcher
		${LAUNCHER_SOURCES}
		)
endif()


	target_link_libraries(hydra_remote_launcher
		${Boost_ASIO_LIBRARIES}
		)


include_directories(${demos_BINARY_DIR})


# TODO these should be autogenerated from the library paths
# And they are different for both release and debug builds and also for 32-bit
# and 64-bit
# Debug is easy to decide we don't need to do anything in here
# we can do that at compiler by appending 'release' and 'debug' to paths
set(HYDRA_GL_BINARY_DIR \"${HydraGL_BINARY_DIR}\")
set(HYDRA_MAIN_BINARY_DIR \"${HydraMain_BINARY_DIR}\")

# set the bin dir variable
# TODO these should be auto resolved
set(HYDRA_DEPENDENCIES_BIN_DIR ""
	CACHE PATH "Dependency library directory")

set(OGRE_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/Ogre/bin\"")
set(CEGUI_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/CEGUI/bin\"")
set(OIS_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/OIS/bin\"")
set(BOOST_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/bin\"")
set(GENERAL_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/bin\"")
Set(EXPAT_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/expat/bin\"")
set(SKYX_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/SkyX/bin\"")
set(CAELUM_BINARY_DIR "\"${HYDRA_DEPENDENCIES_BIN_DIR}/Caelum/bin\"")

# Get the CameraSDK binary dir
# TODO the above should also be replaced with this system for other libraries
# TODO this should use the LIBRARY_DEBUG and LIBRARY_RELEASE
# because LIBRARY contains both (debug and optimazed)
#get_filename_component(file_name "${CameraSDK_LIBRARY}" NAME)
#set(bin_dir "\"${CameraSDK_LIBRARY}\"")
#string(REPLACE ${file_name} "" CAMERASDK_BINARY_DIR ${bin_dir})


configure_file(${demos_SOURCE_DIR}/build_defines_template.hpp
	${demos_BINARY_DIR}/build_defines.hpp )

add_executable(hydra hydra.cpp
	build_defines.hpp
	system_tools/message_box.hpp)

add_executable(angles_to_quaternion
	angles_to_quaternion.cpp
	${HydraMain_SOURCE_DIR}/math/math.cpp
	${HydraMain_SOURCE_DIR}/math/math.hpp)

target_link_libraries(angles_to_quaternion ${Ogre_LIBRARY})

# These should not need to link to anything else than boost
set( SRC
	${HydraMain_SOURCE_DIR}/base/time.hpp
	${HydraMain_SOURCE_DIR}/base/time.cpp
	${HydraMain_SOURCE_DIR}/base/chrono.hpp
	${HydraMain_SOURCE_DIR}/base/chrono.cpp
	${HydraMain_SOURCE_DIR}/base/report.hpp
	)
add_executable(timestamp_client timestamp_client.cpp ${SRC})
target_link_libraries( timestamp_client ${Boost_SYSTEM_LIBRARIES} ${Boost_PROGRAM_OPTIONS_LIBRARIES} )

add_executable(timestamp_server timestamp_server.cpp ${SRC})
target_link_libraries( timestamp_server ${Boost_SYSTEM_LIBRARIES} ${Boost_PROGRAM_OPTIONS_LIBRARIES} )

# install
# install( TARGETS renderer fake_tracking_server DESTINATION ./ )
