<?xml version="1.0"?>

<!--
Joonatan Kuosa <joonatan.kuosa@tut.fi>
2010-11

Test configuration used for development. Contains almost all the tokens
and usable values for them.
Does not contain the specification. Have a look at config/env.xml for that.
-->
<env_config>

	<tracking>
		<file use="true">glasses.trc</file>
	</tracking>

	<!-- How to calculate the projection from 3D virtual world to 2D screen
		 Supported types 'perspective' and 'ortho' defaults to perspective.
		 For the moment this is system wide setting could also be done
		 per screen.  -->
	<projection type="perspective">
		<!-- Can define both perspective and ortho the type value above will
			 choose the one to use.
			 type selects how the projection matrix is calculated
			 supported types 'wall' and 'fov'.  -->
		<perspective type="wall" asymmetric_stereo_frustum="true">
			<!-- Field-of-View (fov) needs only single angle and the horizontal
				 because we use a slightly more complex system than
				 gluPerspective common in games so we can have different
				 horizontals.
				 angle is in Degrees and defaults to 60
				 horizontal is between [0 1] and is the percentage on the
				 2D surface defaults to golden ratio (above 0.5). -->
			<fov angle="60" horizontal="" />

		</perspective>

		<!-- Not defined yet -->
		<ortho>
		</ortho>
	</projection>

	<!-- Global rendering settings mostly used for developing new features
		 but also could be used for enabling disablin features for performance

		 @param surface: Where to render
		 possible values:
		 	FBO
			window
		 default value: window

		 Using FBO surface will cause the renderer to first render all images
		 to FBO then copy them to the Window for displaying.
		 This allows the use of post processing effects and possibility
		 to render the images on another GPU (not supported yet).

		 @todo
		 Seems like there is a hit of ~10% using the debug version when
		 rendering to FBO instead of directly to the screen. Not necessarily
		 significant in real projects, but something to keep an eye out for.
		 @todo
		 FBOs don't support stereo for now, we need to use two separate
		 FBOs for stereo (or alternativily two separate channels).
		 -->
	<renderer surface="FBO" >
		<!-- engine defines the Rasterizer we are using and it's values

			 module: the dynamic load library to use
			 possible values:
			 	HydraGL (our own OpenGL 2 rasterizer)
				RenderSystem_GL (Ogre's OpenGL 2 rasterizer)
				RenderSystem_DX9 (Ogre's DX9 rasterizer)
				RenderSystem_DX11 (Ogre's DX11 rasterizer)
			DirectX rasterizers have not been tested and are not yet supported.
			Module suffix is added automatically: dll (Windows), so (Linux)

			@todo module param not yet supported
			 -->
		<engine module="HydraGL" />
	</renderer>

	<!-- Walls are used based on the name
	if no named walls are in eqc file, then the first wall is used.
	Useful in single channel systems.

	Can contain definitions that are not in use.
	-->
	<walls>
		<wall name="front">
			<bottom_left x="-1.33" y="0.34" z="-1.33" />
			<bottom_right x="1.33" y="0.34" z="-1.33" />
			<top_left x="-1.33" y="2.34" z="-1.33" />
		</wall>
	</walls>

	<!-- trying to enable or disable stereo
	value boolean: enable (ON, TRUE, 1), disable (OFF, FALSE, 1)
	default value: disabled
	-->
	<stereo>ON</stereo>

	<!-- FPS limit, zero means no limit
	     Defaults to 60 if not present.
	 -->
	<fps>0</fps>

	<!-- Inter pupilar distance in meters.
	Good value is 0.065, but your milage may vary.
	Defaults to 0 even if stereo is enabled.
	-->
	<ipd>0.065</ipd>

	<server port="4699" hostname=""/>

	<!-- Programs section
	     autolaunch attribute is not yet implemented
	     -->
	<programs autolaunch="true">
		<!--
		     program description
		     name (necessary) is an unique name for this program instance
		     command (necessary) is the command used to launch the program
		     directory (optional) is the directory where the program is launched
		     use (optional) to enable disable the program without commenting it out
		     use defaults to false and directory defaults to current directory
		-->
		<program use="false" name="dir" command="cmd" directory="" new_console="false">
			<!-- parameters to pass to the program -->
			<param>dir</param>
		</program>
		<program use="false" name="meh" command="cmd" directory="" new_console="false" />
		<program use="false" name="test" command="cmd" directory="" new_console="true" />
	</programs>

	<master name="front">
		<!-- Windows are used based on the name
		If there is no named windows in the file, then the first Window
		is used.
		Useful in single window systems.
		-->
		<windows>
			<!-- Window

				 @param w : widht
				 @param h : height
				 @param x : left coordinate
				 @param y : top coordinate
				 @param display : the Linux display where the window is created
				 could also be Windows monitor if we can figure them out.
				 -->
			<window name="window" w="1024" h="768" x="0" y="0">
				<!-- stereo configuration

					 type: the type of stereo we use for this window
					 possible values:
					 	quad_buffer
						side_by_side
						top_bottom
					default value: quad_buffer
					stereo value will automatically render the viewports
					correctly for that configuration so no need to define
					different viewports for side by side or top bottom stereos
					they are automatically created if needed.
						-->
				<stereo type="quad_buffer" use="true" />

					<!-- Viewport configuration (channel)

					 @param name:

					 size of the viewport on the window 
					 always relative to the window
					 
					 coordinates are homegenic (0-1), so 1 would mean occupy
					 the whole window.
					 @param w: width 
					 @param h: height
					 @param x: left
					 @param y: top
					 default value width=1, height=1, left=0, top=0
					 @todo add support for pixel coordinates

					 @param wall: the frustum to use
					 @todo this should be frustum

					 @todo later there will be possibility to map the channel
					 to FBO instead of wall
					 When mapped to FBO the system will try to find that FBO
					 and render it into the viewport automatically no mattter
					 where that FBO is beign updated from
					 (different processes or even computers).

					 Multiple Channels compared to multiple windows provide
					 much better performance because they lack OpenGL
					 context switching.
					 @todo multiple channels are not yet implemented.
					 -->
				<channel name="front" w="0.5" x="0">
					<!-- @todo wall should be changed to projection
						 projection type should be a general projection template
						 with instances (projection_instance)
						 which define the real projection for example
						 multi wall system will have one wall projection
						 with multiple instances where every instance references
						 a different wall.
						 -->
					<wall>front</wall>
				</channel>
				<!-- @todo w,h,x,y parameters have not been implemented -->
				<!-- @todo add stereo parameter
					 @param stereo
					 possible values:
					 	both : renders both buffers, left and right
						off : renders the mono buffer (zero ipd)
						left : renders the mono buffer with left eye
						right : renders the mono buffer with right eye
					 -->
				<channel name="right" w="0.5" x="0.5" stereo="both">
					<wall>front</wall>
				</channel>

			</window>
		</windows>
	</master>

</env_config>
