// Joonatan Kuosa <joonatan.kuosa@savantsimulators.com>
// Savant Simulators
// 2011-04
//
// Base materials for decent shading
//
// Includes eye and tangent space Bling-Phong base materials

// TODO
// Emissive materials don't work at the moment
// ambient not tested
// problem with scene blending ambient pass

// Common parameters for both single and multi pass Bling-Phong shaders
// TODO does not work
material base_material
{
	set $ambientCol "0 0 0 0"
	set $diffuseCol "1 1 1 1"
	set $specularCol "1 1 1"
	set $shininess "32"
	// TODO add technique and pass
	// TODO we should probably compine single and multi pass versions
	// just with different techniques
	// if it's possible to select
}

material bling_phong/normal_map/shadows/multi_pass
{
	set $ambientCol "0 0 0 0"
	set $emissiveCol "0 0 0 0"
	set $diffuseCol "1 1 1 1"
	set $specularCol "1 1 1"
	set $shininess "32"
	set $depthWrite "on"
	set $ambient_scene_blend "one zero"
	set $diffuse_scene_blend "add"

	technique
	{
		scheme "Forward"
		// ambient pass
		// Do not name the passes, when using inheritance it's ok to reference
		// a parents pass with an index. Names are not ok.
		// Mhhh the problem was not the named passes
		pass
		{
			scene_blend $ambient_scene_blend
			depth_write $depthWrite

			vertex_program_ref pass_through_vs
			{
			}

			fragment_program_ref ambient_ao_ps
			{
			}

			texture_unit ao_map 
			{
				texture white.tga
			}

			ambient $ambientCol
			emissive $emissiveCol
			diffuse 0 0 0 0
			specular 0 0 0 0
		}

		// diffuse pass
		pass 
		{
			illumination_stage per_light
			iteration once_per_light

			scene_blend $diffuse_scene_blend 
			depth_write $depthWrite

			vertex_program_ref bling_phong_sl_shadows_vs
			{
			}

			fragment_program_ref bling_phong_sl_shadows_ps
			{
			}

			diffuse $diffuseCol
			specular $specularCol $shininess
			ambient 0 0 0 0

			// TODO these should be in base_material or abstract pass
			// doesn't work if they are in the base_material for some reason
			// Don't change the order, because textures are mapped with index
			// that is gotten from the order of the texture_units
			texture_unit diffuse_map
			{
				tex_address_mode wrap
				texture white.tga
			}

			texture_unit specular_map
			{
				texture white.tga
			}

			texture_unit normal_map
			{
				texture flat_NM.tga
			}

			// shadowmap 1
			texture_unit
			{
				content_type shadow
				tex_address_mode clamp
				filtering none
			}
		}
	}
	technique
	{
		scheme "Deferred"
		// Geometry pass
		pass
		{
			//lighting off
			//depth_write on

			vertex_program_ref defered_shading/geometry_pass/vp
			{
			}
 
			fragment_program_ref defered_shading/geometry_pass/fp
			{
			}

			ambient $ambientCol
			emissive $emissiveCol
			diffuse $diffuseCol
			specular $specularCol $shininess
			texture_unit diffuse_map
			{
				tex_address_mode wrap
				texture white.tga
			}

			// @todo add normal map

			// @todo add ao map
		}
	}
}

material bling_phong/shadows/multi_pass
{
	set $ambientCol "0 0 0 1.0"
	set $emissiveCol "0 0 0 1.0"
	set $diffuseCol "1 1 1 1"
	set $specularCol "1 1 1"
	set $shininess "32"
	set $depthWrite "on"
	set $ambient_scene_blend "one zero"
	set $diffuse_scene_blend "add"

	technique
	{
		scheme "Forward"

		// ambient pass
		// Do not name the passes, when using inheritance it's ok to reference
		// a parents pass with an index. Names are not ok.
		// Mhhh the problem was not the named passes
		pass
		{
			scene_blend $ambient_scene_blend
			depth_write $depthWrite

			vertex_program_ref pass_through_vs
			{
			}

			fragment_program_ref ambient_ao_ps
			{
			}

			texture_unit ao_map 
			{
				texture white.tga
			}

			ambient $ambientCol
			emissive $emissiveCol
			diffuse 0 0 0 1
			specular 0 0 0 1
		}

		// diffuse pass
		pass 
		{
			illumination_stage per_light
			iteration once_per_light

			scene_blend $diffuse_scene_blend 
			depth_write off //$depthWrite

			vertex_program_ref bling_phong_eye_space_sl_shadows_vs
			{
			}

			fragment_program_ref bling_phong_eye_space_sl_shadows_ps
			{
			}

			diffuse $diffuseCol
			specular $specularCol $shininess
			ambient 0 0 0 1

			// TODO these should be in base_material or abstract pass
			// doesn't work if they are in the base_material for some reason
			// Don't change the order, because textures are mapped with index
			// that is gotten from the order of the texture_units
			texture_unit diffuse_map
			{
				tex_address_mode wrap
				texture white.tga
			}

			texture_unit specular_map
			{
				texture white.tga
			}

			// shadowmap 1
			texture_unit
			{
				content_type shadow
				tex_address_mode clamp
				filtering none
			}
		}
	}
	technique
	{
		scheme "Deferred"
		// Geometry pass
		pass
		{
			//lighting off
			//depth_write on

			vertex_program_ref defered_shading/geometry_pass/vp
			{
			}
 
			fragment_program_ref defered_shading/geometry_pass/fp
			{
			}

			ambient $ambientCol
			emissive $emissiveCol
			diffuse $diffuseCol
			specular $specularCol $shininess

			texture_unit diffuse_map
			{
				tex_address_mode wrap
				texture white.tga
			}

			// @todo add ao map
		}
	}
}

material bling_phong/multi_pass
{
	set $ambientCol "0 0 0 0"
	set $emissiveCol "0 0 0 0"
	set $diffuseCol "1 1 1 1"
	set $specularCol "1 1 1"
	set $shininess "32"
	set $depthWrite "on"
	set $ambient_scene_blend "one zero"
	set $diffuse_scene_blend "add"

	technique
	{
		// ambient pass
		// Do not name the passes, when using inheritance it's ok to reference
		// a parents pass with an index. Names are not ok.
		// Mhhh the problem was not the named passes
		pass
		{
			scene_blend $ambient_scene_blend
			depth_write $depthWrite

			vertex_program_ref pass_through_vs
			{
			}

			fragment_program_ref ambient_ps
			{
			}

			ambient $ambientCol
			emissive $emissiveCol
			diffuse 0 0 0 0
			specular 0 0 0 0
		}

		// diffuse pass
		pass 
		{
			illumination_stage per_light
			iteration once_per_light

			scene_blend $diffuse_scene_blend 
			depth_write $depthWrite

			vertex_program_ref bling_phong_eye_space_sl_vs
			{
			}

			fragment_program_ref bling_phong_eye_space_sl_ps
			{
			}

			diffuse $diffuseCol
			specular $specularCol $shininess
			ambient 0 0 0 0

			// TODO these should be in base_material or abstract pass
			// doesn't work if they are in the base_material for some reason
			// Don't change the order, because textures are mapped with index
			// that is gotten from the order of the texture_units
			texture_unit diffuse_map
			{
				tex_address_mode wrap
				texture white.tga
			}

			texture_unit specularMap
			{
				texture white.tga
			}
		}	// pass
	}	// technique
}

/// Shadows don't work with single pass shader for some reason
material bling_phong/single_pass
{
	set $ambientCol "0 0 0 0.0"
	set $emissiveCol "0 0 0 0.0"
	set $diffuseCol "1 1 1 1"
	set $specularCol "1 1 1"
	set $shininess "32"
	set $depthWrite "on"
	//set $ambient_scene_blend "one zero"
	set $diffuse_scene_blend "one zero"

	technique
	{
		pass 
		{
			scene_blend $diffuse_scene_blend 
			depth_write $depthWrite


			vertex_program_ref bling_phong/multi_light/vertex
			{
			}

			fragment_program_ref bling_phong/multi_light/fragment
			{
			}

			ambient $ambientCol
			emissive $emissiveCol
			diffuse $diffuseCol
			specular $specularCol $shininess
			ambient 0 0 0 0

			// TODO these should be in base_material or abstract pass
			// doesn't work if they are in the base_material for some reason
			// Don't change the order, because textures are mapped with index
			// that is gotten from the order of the texture_units
			texture_unit diffuse_map
			{
				tex_address_mode wrap
				texture white.tga
			}

			//texture_unit specularMap
			//{
			//	texture white.tga
			//}

			texture_unit ao_map
			{
				texture white.tga
			}
		}
	}
}

// Easy way to switch between multi and single pass materials
// it's only a implementation detail users of the shaders should
// not need to worry about it.
material bling_phong/normal_map/shadows : bling_phong/normal_map/shadows/multi_pass {}
material bling_phong/shadows : bling_phong/shadows/multi_pass {}
//material bling_phong/shadows : bling_phong/single_pass {}
material bling_phong : bling_phong/multi_pass {}

