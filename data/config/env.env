<?xml version="1.0"?>

<!--
Designed by Joonas Reunamo <joonas.reunamo@tut.fi>
2010-10

Environment config for eqOgre
Contains machine specifc configuration

Updated by Joonatan Kuosa <joonatan.kuosa@tut.fi>
2011-01
-->

<!--
CRITICAL: tag env_config must exist
-->
<env_config>
	<!--
	Plugin files will be primarily searched from
	- standard paths like /usr/lib
	- [path of this file]/plugins

	List of possible plugins is given here

	GUI: Not found plugins greyed
	-->
	<plugins>
		<plugin use="false">Plugin_BSPSceneManager</plugin>
		<plugin use="false">Plugin_CgProgramManager</plugin>
		<plugin use="false">Plugin_OctreeZone</plugin>
		<plugin use="false">Plugin_OctreeSceneManager</plugin>
		<plugin use="false">Plugin_CgProgramManager</plugin>
		<plugin use="false">Plugin_ParticleFX</plugin>
		<plugin use="false">Plugin_PCZSceneManager</plugin>
	</plugins>

	<!--
	One and only one eqc file must be present

	Eqc file will reside under [path of this file]/eqc
	-->
	<eqc>
		<file>1-window.eqc</file>
	</eqc>

	<!--
	Tracking files are not obligatory

	Files will be appended

	In case of several files, sets in files will be presented [filename]/[set name]

	Tracking files will be under [path of this file]/tracking
	-->
	<tracking>
		<file>test.trc</file>
		<file>tracking2.trc</file>
	</tracking>

	<!-- Set around which axes the camera is allowed to rotate around
	Defaults to all true.
	Only value "false" will set the axis out of use at the moment.

	Be vary of these as they affect how the scene looks but not the
	SceneNodes, so if the scene node is in some obscure rotation but these
	are set to false you might not be moving to the direction you think the
	camera is pointing at.
	-->
	<camera_rotations x="true" y="true" z="true" />

	<!--
	Some possible Virtual Reality configuration additions
	Joonatan Kuosa
	2011-01-05
	-->

	<!--
	Wall configuration: there needs to be one and only one wall
	for every Channel defined in the eqc file.
	
	Wall is mapped to channel using the channel token where the parameter
	name is the name of the channel this wall is mapped to.

	bottom_left, bottom_right and top_left define the wall uniquely in 3d
	space. Coordinate system is OpenGL (right handed, y up, -z front).
	Coordinates are in meters like the whole application.

	Errors : these will exit the program
	- channel_name not unique : used for mapping the wall to Equalizer 
	channel so the channel identifier needs to be unique.
		- Also if there is an Equalizer channel without a wall
		that is also an error, but it will show much later.
	-->
	<walls>
		<!-- 3-wall cluster config
		The front is the first because it is used for 1-window tests.
		-->
		<wall name="front">
			<channel name="channel-front" />
			<bottom_left x="-1.33" y="0.34" z="-1.33" />
			<bottom_right x="1.33" y="0.34" z="-1.33" />
			<top_left x="-1.33" y="2.34" z="-1.33" />
		</wall>

		<wall name="left">
			<channel name="channel-left" />
			<bottom_left x="-1.33" y="0.34" z="1.33" />
			<bottom_right x="-1.33" y="0.34" z="-1.33" />
			<top_left x="-1.33" y="2.34" z="1.33" />
		</wall>

		<wall name="right">
			<channel name="channel-right" />
			<bottom_left x="1.33" y="0.34" z="1.33" />
			<bottom_right x="1.33" y="0.34" z="-1.33" />
			<top_left x="1.33" y="2.34" z="1.33" />
		</wall>

		<!-- half walls for 2-node test -->
		<wall name="half-left">
			<channel name="channel1" />
			<bottom_left x="-1.33" y="0.34" z="-1.33" />
			<bottom_right x="0" y="0.34" z="-1.33" />
			<top_left x="-1.33" y="2.34" z="-1.33" />
		</wall>
		<wall name="half-right">
			<channel name="channel2" />
			<bottom_left x="0" y="0.34" z="1.33" />
			<bottom_right x="1.33" y="0.34" z="-1.33" />
			<top_left x="0" y="2.34" z="1.33" />
		</wall>
	</walls>

	<!--
	Stereo configuration

	Using stereo ON will use stereo driver if such is found. This is the default.
	Using stereo OFF will never use stereo even if such is possible.
	Using stereo REQUIRED will refuse to start without stereo.
	Case-insensitive

	INTER_PUPILAR_DISTANCE : the distance between the pupils (ip)
	both cameras are moved by ip/2 when rendering (to opposite directions of course)

	Only single stereo or ipd is allowed. Implementation can choose to exit
	with an error or use any one of them if defined multiple times.
	-->
	<stereo>REQUIRED</stereo>
	<ipd>0.065</ipd>

	<!--
	Window configuration

	window token
	Resolution and position of the Window
	parameters :
	name = identifier for this window
	h = height of the window
	w = width of the window
	x = x coordinate of the window
	y = y coordinate of the window
	Window coordinates are for the top left corner of the window
	and they are relative to the top left corner of the screen.

	Errors : these will exit the program
	- name not unique : name is used for mapping the window to Equalizer
	window on a physical node so it needs to be unique.
		- also if there is no window for that Equalizer node
		that is also an error, but it will so much later.
	h, w, x, y negative : for obvious reasons
	-->
	<windows>
		<window name="window", w="1024" h="768" x="0" y="0" />
	</windows>


	<!--
	For now these tokens are not in use. But they might be later.

	DOUBLE_BUFFER : Window is by default double buffered, but if not
	supported will hapily use single buffer (quite unlikely).
	We do not really have system to test this, so we might just assume
	that all systems are double buffered and forget about it.

	WINDOW_BORDER : Windows are created borderless for now
	This is the default anyway because it looks cleaner and gives us the 
	fullscreen look and feel without using fullscreen. 

	FULLSCREEN : We do not need or use it for OpenGL
	- As for OpenGL fullscreen does not have any performance gain or any
	gain other than using different resolution or refresh rate than the
	desktop which in the era of TFT monitors and DLP projectors is useless.
	- Also it just adds extra overhead for moving from fullscreen to desktop
	- When using multiple windows it does not work.
	-->

</env_config>
